from enum import Enum

class ValidityEnum(Enum):
    VALID = 0
    INVALID = 1
    NR = 2

class PrimaryRoleEnum(Enum):
    DEFECTOR = 0
    LOW_MORALE = 1
    UNITY = 2

class SecondaryRoleEnum(Enum):
    DEPENDENT = 0
    INDEPENDENT = 1

class CurrentStatusEnum(Enum):
    PAID = 0
    DEFECTED = 1
    SKIPPED = 2
    PAID_INVALID = 3
    QUIT = 4
    REORG = 5
    NR = 6

class PayableEnum(Enum):
    YES = 0
    NO = 1
    NR = 2

class UserRecord:
    def __init__(self, count, bundling):
        orig_sbg_num = 0                            # UsRec1: Original assigned subgroup number (generated by subgroup setup)
        remaining_orig_sbg = 0                      # UsRec2: Number of members remaining from original subgroup (generated by subgroup setup)
        cur_sbg_num = 0                             # UsRec3: Current assigned subgroup number (generated by subgroup setup)
        members_cur_sbg = 0                         # UsRec4: Number of members in current subgroup (generated by subgroup setup)
        
        sbg_status = ValidityEnum.VALID             # UsRec5: Status of subgroup Accepted values: Valid, Invalid, or NR (initialize to VALID)
        
        pri_role = PrimaryRoleEnum.DEFECTOR         # UsRec6: Primary role. Accepted values: Defector, Low-Morale, or Unity (generated by the role-assignment)
        sec_role = SecondaryRoleEnum.DEPENDENT      # UsRec7: Secondary role. Accepted values: Dependent or independent (generated by the role-assignment)
        
        cur_status = CurrentStatusEnum.PAID         # UsRec8: Current status, Accepted values: Defected, Paid, Skipped, Paid-Invalid, Quit, Reorg, or NR (initialize to PAID)
        reorged_cnt = 0                             # UsRec9: Number of times they have reorged (initialize to 0)
        payable = PayableEnum.YES                   # UsRec12: A member's ability to pay this periodAccepted values: Yes, No, or NR (initialize to YES)
        defector_cnt = 0                            # UsRec13: Defector counter
        
        wallet_balance = 0                          # User's wallet balance
        wallet_claim_award = 0                      # TODO: No description provided
        wallet_no_claim_refund = 0                  # No claim in the previous month refund (?)
        wallet_reorg_refund = 0                     # Reorganiztion from previous month refund. This refund is awarded to the user if they were reorged in the previous month.

        cur_month_first_calc = 0                    # Current month's first premium calculation
        cur_month_balance = 0                       # Current month's balance
        cur_month_premium = 0                       # Current month's premium
        cur_month_second_calc_list = [0] * count    # cur_month_second_calc_list[i] = Current month's second premium calculation from (i+1) period

        prior_month_premium_list = [0] * bundling   # prior_month_premium_list[i] = premium from i+1 months ago
        
        total_value_refund_list = [0] * count       # total value of the refind from period (i+1)

        debit_to_savings_account_list = [0] * count # amount debited to savings account in period (i+1)

